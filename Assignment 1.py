# -*- coding: utf-8 -*-
"""07_Marium Malek.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17lmBOCEYXwBSaUGO816F3NzLm8QSc3Ee
"""

def function_to_define_default(list):
    area={'Arad': 'A', 'Neamt': 'F', 'Bucharest': 'Z', 'Oradea': 'B', 'Craiova': 'S', 'Pitesti': 'P', 'Eforie': 'T',
            'RimnicuVilcea': 'R', 'Fagaras': 'O', 'Timisoara': 'C', 'Dobreta': 'V', 'Urziceni': 'D', 'Hirsova': 'N',
            'Vaslui': 'H', 'lasi': 'Q', 'Zerind': 'E', 'Lugoj': 'G', 'Mehadia': 'L', 'Giurgiu':'I' ,'Sibiu':'J'}
    distt={}
    heuris={}
    covered={}
    c=0
    while True:
        if len(list)==c:
            break
        else:
            temp_file=area[list[c][0]]

            distt[temp_file] = {}
            covered[temp_file] = False
            heuris[temp_file] = int(list[c][1])
            for i in range(2, len(list[c]), 2):
                covered[area[list[c][i]]] = False
                distt[temp_file][area[list[c][i]]] = int(list[c][i+1])
        c+=1
    return distt,heuris,covered
def star(distt,heuris,covered,start,end):
    import heapq
    import math
    tmp_queue=[]
    distt_maximum = math.inf
    final_path=[]
    covered[start] = True
    for i in distt[start]:
        heapq.heappush(tmp_queue, (distt[start][i]+heuris[i],[start,i]))

    while (len(tmp_queue) > 0):
        cst,terget_path = heapq.heappop(tmp_queue)
        if(covered[terget_path[-1]]):
            continue
        covered[terget_path[-1]] = True
        for i in distt[terget_path[-1]]:
            new_cst = cst - heuris[terget_path[-1]] + heuris[i] + distt[terget_path[-1]][i]
            terget_path_new = terget_path + [i]
            heapq.heappush(tmp_queue, (new_cst,terget_path_new))
            if(terget_path_new[-1] == end and new_cst <distt_maximum):
                distt_maximum = new_cst
                final_path = terget_path_new
    return final_path,distt_maximum
area={'Arad': 'A', 'Neamt': 'F', 'Bucharest': 'Z', 'Oradea': 'B', 'Craiova': 'S', 'Pitesti': 'P', 'Eforie': 'T',
            'RimnicuVilcea': 'R', 'Fagaras': 'O', 'Timisoara': 'C', 'Dobreta': 'V', 'Urziceni': 'D', 'Hirsova': 'N',
            'Vaslui': 'H', 'lasi': 'Q', 'Zerind': 'E', 'Lugoj': 'G', 'Mehadia': 'L', 'Giurgiu':'I' ,'Sibiu':'J'}

f=open("Input file.txt", "r")

r=f.read()
file1=r.split("\n")
file2=[]
for i in file1:
    file2.append(i.split(' '))


start = input("Start node: ")
end = input("End node: ")
if start in area.keys() and end in area.keys():
    distt,heuris,covered=function_to_define_default(file2)
    final_path,distt_maximum=star(distt,heuris,covered,area[start],area[end])

    if final_path!=[]:
        path=''
        for i in final_path:

            path+=list(area.keys())[list(area.values()).index(i)]+' --> '
        print('Path: ',path[:-5])
        print(f'Total distt: {distt_maximum} km')
    else:
        print("NO PATH FOUND")
else:
    print("NO PATH FOUND")